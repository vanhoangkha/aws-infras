AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  fcjdmssam

  Sample SAM Template for fcjdmssam

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Parameters:
  DocumentStoreBucketName:
    Type: String
    Default: fcjdmsstore
  WebStoreBucketName:
    Type: String
    Default: fcjdmswebstore

Resources:
  FcjDMSStore:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref DocumentStoreBucketName
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - HEAD
              - PUT
              - POST
              - DELETE
            AllowedOrigins:
               - '*'
            ExposedHeaders:
              - x-amz-server-side-encryption
              - x-amz-request-id
              - x-amz-id-2
              - ETag
            MaxAge: 1800

  FcjDMSWebStore:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref WebStoreBucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: "false"
        BlockPublicPolicy: "false"
      WebsiteConfiguration:
        IndexDocument: 'index.html'

  FcjDMSWebStorePolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FcjDMSWebStore
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: Allow
            Principal: "*"
            Resource: !Join
              - ""
              - - "arn:aws:s3:::"
                - !Ref FcjDMSWebStore
                - /*

  # Creates a user pool in cognito for your app to auth against
  FcjDMSUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: "cognito-fcj-dms"
      MfaConfiguration: "OFF"
      AliasAttributes:
        - preferred_username
        - email
      AutoVerifiedAttributes: 
        - email
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
          TemporaryPasswordValidityDays: 30
      UserAttributeUpdateSettings:
        AttributesRequireVerificationBeforeUpdate:
          - email
          
  # Creates a User Pool Client to be used by the identity pool
  FcjDMSUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: "fcj-dms"
      UserPoolId: !Ref FcjDMSUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
  
  # Creates a federeated Identity pool
  FcjDMSUserPoolIdentityPool:
    Type: "AWS::Cognito::IdentityPool"  
    Properties:
      IdentityPoolName: "fcj-dms-identity"
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders: 
        - ClientId: !Ref FcjDMSUserPoolClient
          ProviderName: !GetAtt FcjDMSUserPool.ProviderName

  # Create a role for unauthorized access to AWS resources. Very limited access. Only allows users in the previously created
  CognitoUnAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": !Ref FcjDMSUserPoolIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: "CognitoUnauthorizedPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                Resource: !Join
                  - ""
                  - - "arn:aws:s3:::"
                    - !Ref DocumentStoreBucketName
                    - /protected/*
  
  # Create a role for authorized access to AWS resources. Control what your user can access. This example only allows Lambda invokation
  # Only allows users in the previously created Identity Pool
  CognitoAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": !Ref FcjDMSUserPoolIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: "CognitoAuthorizedPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:DeleteObject"
                Resource: '*'
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                Resource: !Join
                  - ""
                  - - "arn:aws:s3:::"
                    - !Ref DocumentStoreBucketName
                    - /protected/*
  
  # Assigns the roles to the Identity Pool
  IdentityPoolRoleMapping:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref FcjDMSUserPoolIdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthorizedRole.Arn
        unauthenticated: !GetAtt CognitoUnAuthorizedRole.Arn

  # Create a table to storage document informations
  DocsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Documents
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: file
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: file
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  # Create a table to storage general informations
  GeneralTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: General
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  # Lambda function to scan all document by user id
  DocsList:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/list_docs
      Handler: list_docs.lambda_handler
      Runtime: python3.9
      FunctionName: list_docs
      Architectures:
        - x86_64
      Policies:
        - Statement:
            - Sid: ReadDynamoDB
              Effect: Allow
              Action:
                - dynamodb:Scan
                - dynamodb:Query
              Resource:
                - !GetAtt DocsTable.Arn
      Events:
        ListDocs:
          Type: Api
          Properties:
            Path: /docs/{id}
            Method: get
            RestApiId: !Ref DocApi
      Environment:
        Variables:
          TABLE_NAME: !Ref DocsTable

  # Lambda function to upload documents
  DocsUpload:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/upload_doc
      Handler: upload_doc.lambda_handler
      Runtime: python3.9
      FunctionName: upload_doc
      Architectures:
        - x86_64
      Policies:
        - Statement:
            - Sid: WriteToDynamoDB
              Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource:
                - !GetAtt DocsTable.Arn
      Events:
        UpoadDocs:
          Type: Api
          Properties:
            Path: /docs
            Method: post
            RestApiId: !Ref DocApi
      Environment:
        Variables:
          TZ: Asia/Jakarta
          TABLE_NAME: !Ref DocsTable

  # Lambda function to delete documents by user id
  DocsDelete:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/delete_doc
      Handler: delete_doc.lambda_handler
      Runtime: python3.9
      FunctionName: delete_doc
      Architectures:
        - x86_64
      Policies:
        - Statement:
          - Sid: DeleteItems
            Effect: Allow
            Action:
              - dynamodb:DeleteItem
              - dynamodb:GetItem
              - dynamodb:Query
            Resource:
              - !GetAtt DocsTable.Arn
      Events:
        DeleteDoc:
          Type: Api
          Properties:
            Path: /docs/{id}
            Method: delete
            RestApiId: !Ref DocApi
      Environment:
        Variables:
          TABLE_NAME: !Ref DocsTable

  GeneralInforUpload:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/upload_general_infor
      Handler: upload_general_infor.lambda_handler
      Runtime: python3.9
      FunctionName: upload_general_infor
      Architectures:
        - x86_64
      Policies:
        - Statement:
          - Sid: DeleteItems
            Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource:
              - !GetAtt GeneralTable.Arn
      Events:
        DeleteDoc:
          Type: Api
          Properties:
            Path: /docs/{id}/gen/
            Method: post
            RestApiId: !Ref DocApi
      Environment:
        Variables:
          TABLE_NAME: !Ref GeneralTable

  GeneralInforGet:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/get_general_infor
      Handler: get_general_infor.lambda_handler
      Runtime: python3.9
      FunctionName: get_general_infor
      Architectures:
        - x86_64
      Policies:
        - Statement:
          - Sid: DeleteItems
            Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:Query
            Resource:
              - !GetAtt GeneralTable.Arn
      Events:
        DeleteDoc:
          Type: Api
          Properties:
            Path: /docs/{id}/gen/
            Method: get
            RestApiId: !Ref DocApi
      Environment:
        Variables:
          TABLE_NAME: !Ref GeneralTable

  # Create REST Api
  DocApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      DefinitionBody:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: "./swagger.yaml"

  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Join
              - ""
              - - !Ref FcjDMSWebStore
                - ".s3-website-"
                - !Ref AWS::Region
                - ".amazonaws.com"
            Id: !Join
              - ""
              - - !Ref FcjDMSWebStore
                - ".s3-website-"
                - !Ref AWS::Region
                - ".amazonaws.com"
            CustomOriginConfig: 
              OriginProtocolPolicy: "http-only"
        Enabled: "true"
        DefaultRootObject: "index.html"
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          TargetOriginId: !Join
            - ""
            - - !Ref FcjDMSWebStore
              - ".s3-website-"
              - !Ref AWS::Region
              - ".amazonaws.com"
          CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6"
          OriginRequestPolicyId: "88a5eaf4-2fd4-4709-b370-b4c650ea3fcf"
          ViewerProtocolPolicy: "redirect-to-https"

Outputs:
  DocApi:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${DocApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
  Distribution:
    Description: "Domain name"
    Value: !GetAtt Distribution.DomainName

